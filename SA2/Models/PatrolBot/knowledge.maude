fmod MODEL-KNOWLEDGE is
  inc SOFT-AGENTS .
	inc CONVERSION .
	inc RANDOM .

  vars t t0 t1 t2 t3 t4 t5 t6 : Time .
  var n i j j0 j1 n0 n1 e e0 e1 e2 : Nat .
  vars x y x1 y1 x0 y0 xll xur yll yur i0 i1 : Int .
  vars id id0 id1 : Id .
	var cl : Class .
  vars l l0 l1 l2 l3 loc : Loc .
  vars ll ll0 ll1 ur ur0 ur1 pt0 pt1 pt dl0 dl1 : Pt2 .
  vars ekb ekb0 ekb1 kb  lkb kb1 lkb0 kb0 kb2 :  KB .
  vars dir dir0 dir1 : Pt2 . **** Dir .
  vars  ff ff0 ff1 fp0 fp1 rp0 rp1 : FiniteFloat .
	vars act act0 act1 : Action .

**** Measure charge in % full
**** Max is thus 100

****  op botDelay : -> Nat .

**** % battery
  op costMv : -> Nat . 
  op chargeUnit : -> Nat .
****  op maxCharge : -> Nat .      --- stop charging when full
 

*** class
  op Bot : -> Class .
  op Station : -> Class .
  op Obstacle : -> Class .

*** location
  sort Pt2 .
  subsort Pt2 < Loc .
  op pt : Int Int -> Pt2 .

  op sum : Pt2 Loc -> Loc .
  eq sum(pt(x0,y0),pt(x1,y1)) = pt(x0 + x1, y0 + y1) .
  eq sum(pt(x0,y0),l:Loc) = l:Loc [owise] .

  op mult : Int Loc -> Loc .
  eq mult(x,pt(x1,y1)) = pt(x * x1, x * y1) .
  eq mult(x,l:Loc) = l:Loc [owise] .

  ****          pt   ll   ur
  op inBounds : Pt2 Pt2 Pt2 -> Bool .
  eq inBounds(pt(x,y), pt(x0,y0), pt(x1,y1)) =
       (x0 <= x) and (x <= x1) and (y0 <= y) and (y <= y1) .

**** Bot specific knowledge
  **** myY is the track bot is moving along
    op myY : Id Nat -> Info .    
  **** myDir is the direction the bot is heading
    op myDir : Id Pt2 -> Info .  
  **** number of times off track (and not charging)
    op offTrack : Id Nat -> Info . 

    op getMyY : Id KB  -> [Nat] .  
    eq getMyY(id, kb (myY(id,y) @ t)) = y .
  
    op getMyDir : Id KB  -> [Pt2] .  
    eq getMyDir(id, kb myDir(id,dir) @ t) = dir .
  
  op energy : Id Nat -> Info [ctor] .
  eq hasId(id,energy(id,e) @ t) = true .

  op getEnergy : Id KB -> Nat .
  eq getEnergy(id, (energy(id,e) @ t) lkb ) = e .
  eq getEnergy(id,lkb ) = 0 [owise] .

  op ereserve : Id Nat -> Info [ctor] .
  eq hasId(id, ereserve(id,e) @ t) = true .
  op getEreserve : Id KB -> Nat .
  eq getEreserve(id, (ereserve(id,e) @ t) kb) = e .
  eq getEreserve(id,  kb) =  costMv [owise] .  
  
  *** location
    sort LocTime .
    op [_`,_] : Loc Time -> LocTime [ctor]  .
    sort LocTimeList .
    subsort LocTime < LocTimeList .
    op nil : -> LocTimeList [ctor] .
    op _;_ : LocTimeList LocTimeList 
               -> LocTimeList [ctor assoc id: nil] .
  
   op len : LocTimeList -> Nat .
   eq len(lt:LocTime ; ltl:LocTimeList) = s (len(ltl:LocTimeList)) .
   eq len(nil) = 0 .
   
   op visits : Id LocTimeList -> Info [ctor] .
   op numVisits : KB -> Nat .
   eq numVisits(kb visits(id,ltl:LocTimeList) @ t)
        = len(ltl:LocTimeList) .
   eq numVisits(kb) = 0 [owise] .
   
***(
  op caution : Id FiniteFloat -> Info [ctor] .
  eq hasId(id,caution(id,e) @ t) = true .
	
  op getCaution : Id cautKB -> FiniteFloat .
  eq getCaution(id, (caution(id,e) @ t) lkb ) = e .
  eq getCaution(id,lkb ) = 1.0 [owise] .
)

**** Boundary for location of bot id 
**** lower left and upper right corners
	op fence : Id Pt2 Pt2 -> Info [ctor] .

**** max communication distance

	op comDist : Nat -> PKItem [ctor] .
  op getComDist : KB -> Nat .
  eq getComDist(comDist(n) kb) = n .
  eq getComDist(kb) = 0 [owise] .

  op getComDistKI :  KB -> KB .
  eq getComDistKI(comDist(n) kb) = comDist(n) .
  eq getComDistKI(kb) = none [owise] .

**** for modeling faults 
  op randInc : Nat -> KItem .
  op rand : Id Nat Nat -> Info .

**** abstracting random numbers to [0,1]
  ops randMax rand.25 rand.5 rand.75 rand.125 : -> Nat .
  eq randMax = 4294967295 .
	eq rand.25 = 1073741824 .
	eq rand.5  = 2147483647 .
	eq rand.75 = 3221225471 .
  eq rand.125 = 536870912 .

****

***  sort Dir .   subsort Dir < Pt2 .
  ops E W N S : -> Pt2 .  **** east (right) west (left) north south
  eq E = pt(1,0) .
  eq W = pt(-1,0) .
  eq N = pt(0,1) .
  eq S = pt(0,-1) .

  op reverseDir : Pt2 -> Pt2 .
  eq reverseDir(pt) = mult(-1,pt) .

  op atEdge : Loc Loc Loc -> Bool .
	eq atEdge(pt(x,y), pt(xll,yll), pt(xur,yur)) = 
	    ((x == xll) or (y == yll)  or (x == xur)  or (y == yur)) . 

**** at vertical or horizontal edge tests
  op atVEdge : Loc Loc Loc -> Bool .
	eq atVEdge(pt(x,y), pt(xll,yll), pt(xur,yur)) 
       =  ((x == xll) or (x == xur))  . 

  op atHEdge : Loc Loc Loc -> Bool .
	eq atHEdge(pt(x,y), pt(xll,yll), pt(xur,yur)) 
       =  ((y == yll) or (y == yur))  . 

*** partial order
****  eq atloc(id,l0) @ t0 << atloc(id,l1) @ t1 = t0 < t1 .
  eq (myY(id,y0) @ t0) << (myY(id,y1) @ t1) = t0 < t1 .
  eq myDir(id,dir0) @ t0 << myDir(id,dir1) @ t1 = t0 < t1 .

****  eq (clock(t0)) << (clock(t1)) = t0 < t1 .
  eq (energy(id,e0) @ t0) << (energy(id,e1) @ t1) =  t0 < t1 .
  eq (fence(id,ll0, ur0) @ t0) 
         << (fence(id,ll1,ur1) @ t1) = t0 < t1 .
  eq (rand(id,n0,j0) @ t0) << (rand(id,n1,j1) @ t1) = t0 < t1 .
  eq lastAct(act0) @ t0 << lastAct(act1) @ t1 = t0 < t1 .
  eq (offTrack(id,n0) @ t0) <<  (offTrack(id,n1) @ t1) = t0 < t1 .
  eq (visits(id,ltl0:LocTimeList) @ t0)
            << (visits(id,ltl1:LocTimeList) @ t1) = t0 < t1 .
  
  ops obstacleS energyS : -> Sensor [ctor] .

endfm	

fmod MODEL-ACTIONS is ******** bot  actions
  inc MODEL-KNOWLEDGE .  

  vars t t0 t1 t2 t3 t4 t5 t6 : Time .
  var n i j j0 j1 n0 n1 e e0 e1 e2 : Nat .
  vars x y x1 y1 x0 y0 xll xur yll yur i0 i1 : Int .
  vars id id0 id1 : Id .
	var cl : Class .
  vars l l0 l1 l2 l3 loc : Loc .
  vars ll ll0 ll1 ur ur0 ur1 pt0 pt1 pt dl0 dl1 : Pt2 .
  vars ekb ekb0 ekb1 kb  lkb kb1 lkb0 kb0 kb2 :  KB .
  vars dir dir0 dir1 : Pt2 . **** Dir .
  vars  ff ff0 ff1 fp0 fp1 rp0 rp1 : FiniteFloat .
	vars act act0 act1 : Action .


  op mv : Id Pt2 -> Action .
  op charge : Id -> Action .
  
  op actId : Action ~> Id .
  eq actId(mv(id,pt)) = id .
  eq actId(charge(id)) = id .
  
  
********* helpers
  op myActs : Class Id KB -> ActSet .
  eq myActs(cl, id,lkb) =
	  ( myMvs(cl,id,lkb)
		 (if canCharge(cl,id,lkb) then charge(id) else none fi)) .

**** at station and not fully charged 
  op canCharge : Class Id KB -> Bool .
  ceq canCharge(Bot,id,lkb) = true
	if (atloc(id,l) @ t0) class(id,Bot) 
     (atloc(id1,l) @ t1) class(id1,Station)
		 (energy(id,e) @ t2) lkb0 := lkb
  /\ e < 100 .
	
  eq canCharge(Bot,id,lkb) = false [owise] .

  op myMvs : Class Id KB -> ActSet .

	ceq myMvs(Bot,id, lkb (fence(id, pt(xll,yll), pt(xur,yur)) @ t)) =
    ((if occupied(l0,lkb) then none else mv(id,E) fi)
     (if occupied(l1,lkb) then none else mv(id,W) fi)		
     (if occupied(l2,lkb) then none else mv(id,S) fi)				
     (if occupied(l3,lkb) then none else mv(id,N) fi)	)
	if l := getLoc(id,lkb)
	/\ l0 := doMv(l,E, pt(xll,yll), pt(xur,yur))
	/\ l1 := doMv(l,W, pt(xll,yll), pt(xur,yur))
	/\ l2 := doMv(l,S, pt(xll,yll), pt(xur,yur))
	/\ l3 := doMv(l,N, pt(xll,yll), pt(xur,yur)) .

	eq myMvs(cl,id,lkb) = none [owise] .

  op occupied : Loc KB -> Bool .
  eq occupied(l0,(atloc(id,l0) @ t) class(id,Bot) ekb) = true .
  eq occupied(l0,(atloc(id,l0) @ t) class(id,Obstacle) ekb) = true .
  eq occupied(l0, ekb) = false [owise] .

  --- in contact if distance is less than or equal to comDistance
  eq inContact(id0,id1,ekb) 
   = distance(getLoc(id0,ekb),getLoc(id1,ekb)) <= getComDist(ekb) .

**** model of expected result of move actions
  op doMv : Loc Pt2 Loc Loc -> Loc .
  ceq doMv(l,pt,pt0,pt1) =
    if inBounds(l1,pt0,pt1) then l1 else l fi
  if l1 := sum(l,pt)  .
  eq doMv(loc,pt,pt0,pt1) = loc [owise] .

*** agents model of action = maude physics when no interference
*** returns the kb update
op doAct :  Action KB -> KB .

var dl : Pt2 .

*********** move
ceq doAct(mv(id, dir), 
         clock(t) (atloc(id,l) @ t0) (energy(id,e) @  t1) 
         (fence(id,pt0, pt1) @ t3) lkb)
  = (atloc(id,l1) @ s t) (energy(id,e1) @ s t) 
  if l0 := sum(l,dir)  
  /\ l1 := (if (inBounds(l0,pt0,pt1) and not(occupied(l0,lkb)))
           then l0
           else l fi)
  /\ e1 := max(e - costMv,0)  .
  
*************   charge
ceq doAct(charge(id), 
         clock(t) (atloc(id,l) @ t0) (energy(id,e) @  t1) 
         (atloc(id0,l) @ t3) class(id0,Station) lkb)
  =  (energy(id,e1) @ s t) 
  if e0 := e + chargeUnit
  /\ e1 := min(e0,100)
  .

eq doAct(a:Action,kb) = none [owise] .

eq distance(pt(x0,y0),pt(x1,y1)) 
    = abs(x0 - x1) + abs(y0 - y1) .
 
  op cost2loc : Loc Loc -> Nat .
  eq cost2loc(l0,l1) = distance(l0,l1) * costMv .
  
endfm

fmod FAULT-MODEL is
  inc MODEL-KNOWLEDGE .
  
***(
physical knowledge
 class(id,cl)
 atloc(id,loc) @ t
 energy(id,e) @ t
 camera(id,cpar,pix,free) @ t  
    pic(id,cpar,loc,t)  photographer, camera config, loc/time of snap
    pix picset
    free -- available space for pictures
  fence
  
sensor names 
  locS
  energyS
  obstacleS

fence and station info are part of agents kb

Actions
  mv(id,dir)    
  charge(id)

Camera
  click(id)
  rot(id,n)  
) 


**** Fault/Failure model  

sort FVal .
op ffV : FiniteFloat -> FVal .
op ptV : Pt2 -> FVal .
op intV : Int -> FVal .

vars  ff ff0 ff1  : FiniteFloat .
vars  pt0 pt1 pt  : Pt2 .
vars i0 i1 : Int .

op sum : FVal FVal -> FVal .
op mult : Int FVal -> FVal .

eq sum(ffV(ff0), ffV(ff1)) = ffV(ff0 + ff1) .
eq sum(ptV(pt0), ptV(pt1)) = ptV(sum(pt0, pt1)) .
eq sum(intV(i0), intV(i1)) = intV(i0 + i1) .

sorts FType FPars .
op simpleFT : -> FType [ctor] .
op sFP : FiniteFloat FiniteFloat FVal -> FPars [ctor] .
****      prob scale   prob shift  (scale shift) 

op boolFT : -> FType [ctor] .
op bFP : FiniteFloat -> FPars [ctor] .  *** prob of fail

endfm

fmod SENSOR-FAULTS is
 inc FAULT-MODEL .
 inc MODEL-KNOWLEDGE .
 

  vars t t0 t1 t2 t3 t4 t5 t6 : Time .
  var n i j j0 j1 n0 n1 e e0 e1 e2 : Nat .
  vars x y x1 y1 x0 y0 xll xur yll yur i0 i1 i2 : Int .
  vars id id0 id1 : Id .
	var cl : Class .
  vars l l0 l1 l2 l3 loc : Loc .
  vars ll ll0 ll1 ur ur0 ur1 pt0 pt1 pt dl0 dl1 : Pt2 .
  vars ekb ekb0 ekb1 kb  lkb kb1 lkb0 kb0 kb2 :  KB .
  vars dir dir0 dir1 : Pt2 . **** Dir .
  vars  ff ff0 ff1 fp0 fp1 rp0 rp1 : FiniteFloat .
	vars act act0 act1 : Action .

  var ftype : FType .
  var fpars : FPars .
  var sen : Sensor .


**** Sensor faults
op sF : Id Sensor FType FPars -> Info .

op getSF : Id Sensor KB -> KB .
eq getSF(id,sen,(sF(id,sen,ftype,fpars) @ t) kb) = 
             (sF(id,sen,ftype,fpars) @ t)  .
eq getSF(id,sen, kb) = none [owise] .

*********** reading sensors

op occupiedNbrs : KB Loc -> KB .
op occupiedNbrsX : KB Loc KB -> KB .

eq occupiedNbrs(kb,l) = occupiedNbrsX(kb,l,none) . 
ceq occupiedNbrsX((atloc(id,l0) @ t) class(id,cl) kb0,l,kb1) 
   = occupiedNbrsX(kb0,l,kb1 kb2) 
  if kb2 := 
       (if (((cl == Bot) or (cl == Obstacle)) and isNbr(l,l0) )
       then (atloc(id,l0) @ t) class(id,cl)
       else none
       fi)  .
  
eq occupiedNbrsX(kb,l,kb1) = kb1 [owise] .
     
op isNbr : Loc Loc -> Bool .
eq isNbr(pt(x0,y0),pt(x1,y1)) =  abs(x0 - x1) + abs(y0 - y1) == 1 .

*** op readSensors : Id SensorSet KB -> KBPair .
op readSensorsX : Id SensorSet KB KB -> KBPair .

eq readSensors(id,ss:SensorSet,ekb) =
     readSensorsX(id,ss:SensorSet,ekb,none) .
eq readSensorsX(id,none,ekb,kb)  = {kb,ekb} .
ceq readSensorsX(id,s:Sensor ss:SensorSet,ekb,kb) =
      readSensorsX(id, ss:SensorSet,ekb0,addK(kb,kb0))
if {kb0,ekb0} := readSensor(id,s:Sensor,ekb) .

--- (sensor item or none) 
op getSensorKI : Id Sensor KB -> KB . 

--- sensorKB (after fault adjustment), updated Ekb
op readSensor : Id Sensor KB -> KBPair . 

eq getSensorKI(id,locS, (atloc(id,l) @ t) kb) 
     = (atloc(id,l) @ t) .
eq getSensorKI(id,energyS, (energy(id,e) @ t) kb) 
     = (energy(id,e) @ t) .
eq getSensorKI(id,obstacleS, (atloc(id,l) @ t) kb) 
     = occupiedNbrs(kb,l) .
eq getSensorKI(id,s:Sensor, kb) = none [owise] .

op getSensorsKI : Id SensorSet KB -> KB .
eq getSensorsKI(id,s:Sensor sset:SensorSet,ekb) =
   (getSensorKI(id,s:Sensor,ekb)  getSensorsKI(id,sset:SensorSet,ekb)) .
eq getSensorsKI(id,(none).SensorSet,ekb) = (none).KB .


ceq readSensor(id,s:Sensor,kb) =
    (if kb1 == none 
    then {kb0,kb} 
    else applySensorF(id,s:Sensor,kb0,kb1,kb) fi)
if kb0 := getSensorKI(id,s:Sensor,kb)
/\ kb1 := getSF(id,s:Sensor,kb)
.

****                       sget fault ekb
op applySensorF : Id Sensor KB KB KB -> KBPair .
ceq applySensorF(id,locS,atloc(id,l) @ t0, 
                 (sF(id,locS,simpleFT,sFP(fp0,fp1,ptV(pt0))) @ t1),
                 (rand(id,i,j) @ t4 ) ekb)
    = {atloc(id,l1) @ t, ekb  (rand(id,i,s s j) @ t)}
  if (fence(id,ll,ur) @ t2) clock(t) randInc(n) ekb0
     := ekb
  /\ rp0 := float(random( (n * j) + i) / randMax)
  /\ rp1 := float(random( (n * (j + 1)) + i) / randMax )
  /\ dl0 := if rp0 < fp0 then pt(0,0) else l fi
  /\ dl1 := if rp1 < fp1 then pt0 else pt(0,0) fi
  /\ l0 := sum(l,dl1)
  /\ l1 := (if (rp0 < fp0) 
            then noLoc 
            else (if inBounds(l0,ll,ur) then l0 else l fi) fi) .

****(fence(id,ll,ur) @ t2)
ceq applySensorF(id,energyS,energy(id,e) @ t0,
          (sF(id,energyS,simpleFT,sFP(fp0,fp1,intV(i0))) @ t1),
          (rand(id,i,j) @ t4 ) ekb)
   = {energy(id,e2) @ t, ekb (rand(id,i,s s j) @ t)}
  if clock(t) randInc(n)  ekb0 := ekb
  /\ rp0 := float(random( (n * j) + i) / randMax)
  /\ rp1 := float(random( (n * (j + 1)) + i) / randMax)
  /\ i := if rp0 < fp0 then 0 else 1 fi
  /\ i1 := if rp1 < fp1 then i0 else 0 fi
  /\ i2 := e + i1
  /\ e2 := i * (if i2 >= 0 then i2 else 0 fi)  .

ceq applySensorF(id,obstacleS,kb0,
                (sF(id,obstacleS,boolFT,bFP(fp0)) @ t1),
                (rand(id,i,j) @ t4 ) ekb) =
        {kb1, (rand(id,i, s j) @ t)  ekb}
  if (fence(id,ll,ur) @ t2) clock(t) randInc(n)  ekb0
     := ekb
  /\ rp0 := float(random( (n * j) + i) / randMax)
  /\ kb1 := if rp0 < fp0 then none else kb0 fi .
  
eq applySensorF(id,s:Sensor,kb0,kb1,ekb) = {kb0, ekb} [owise] .

endfm


fmod MODEL-KAS  is
  inc MODEL-KNOWLEDGE .
  inc MODEL-ACTIONS .
  inc SENSOR-FAULTS .
endfm  