
fmod SENSOR-FAULTS is
 inc FAULT-MODEL .
**** inc MODEL-KNOWLEDGE .
 

  vars t t0 t1 t2 t3 t4 t5 t6 : Time .
  var n i j j0 j1 n0 n1 e e0 e1 e2 : Nat .
  vars x y x1 y1 x0 y0 xll xur yll yur i0 i1 i2 : Int .
  vars id id0 id1 : Id .
	var cl : Class .
  vars l l0 l1 l2 l3 loc : Loc .
  vars ll ll0 ll1 ur ur0 ur1 pt0 pt1 pt dl0 dl1 : Pt2 .
  vars ekb ekb0 ekb1 kb  lkb kb1 lkb0 kb0 kb2 :  KB .
  vars dir dir0 dir1 : Pt2 . **** Dir .
  vars  ff ff0 ff1 fp0 fp1 rp0 rp1 : Rat .
	vars act act0 act1 : Action .

  var ftype : FType .
  var fpars : FPars .
  var sen : Sensor .


**** Sensor faults
op sF : Id Sensor FType FPars -> Info .

op getSF : Id Sensor KB -> KB .
eq getSF(id,sen,(sF(id,sen,ftype,fpars) @ t) kb) = 
             (sF(id,sen,ftype,fpars) @ t)  .
eq getSF(id,sen, kb) = none [owise] .

*********** reading sensors

op occupiedNbrs : KB Loc -> KB .
op occupiedNbrsX : KB Loc KB -> KB .

eq occupiedNbrs(kb,l) = occupiedNbrsX(kb,l,none) . 
ceq occupiedNbrsX((atloc(id,l0) @ t) class(id,cl) kb0,l,kb1) 
   = occupiedNbrsX(kb0,l,kb1 kb2) 
  if kb2 := 
       (if (((cl :: BotClass) or (cl == Obstacle)) and isNbr(l,l0) )
       then (atloc(id,l0) @ t) class(id,cl)
       else none
       fi)  .
  
eq occupiedNbrsX(kb,l,kb1) = kb1 [owise] .
     
op isNbr : Loc Loc -> Bool .
eq isNbr(pt(x0,y0),pt(x1,y1)) =  abs(x0 - x1) + abs(y0 - y1) == 1 .

*** op readSensors : Id SensorSet KB -> KBPair .
op readSensorsX : Id SensorSet KB KB -> KBPair .

eq readSensors(id,ss:SensorSet,ekb) =
     readSensorsX(id,ss:SensorSet,ekb,none) .
eq readSensorsX(id,none,ekb,kb)  = {kb,ekb} .
ceq readSensorsX(id,s:Sensor ss:SensorSet,ekb,kb) =
      readSensorsX(id, ss:SensorSet,ekb0,addK(kb,kb0))
if {kb0,ekb0} := readSensor(id,s:Sensor,ekb) .

--- (sensor item or none) 
op getSensorKI : Id Sensor KB -> KB . 

--- sensorKB (after fault adjustment), updated Ekb
op readSensor : Id Sensor KB -> KBPair . 

eq getSensorKI(id,locS, (atloc(id,l) @ t) kb) 
     = (atloc(id,l) @ t) .
eq getSensorKI(id,energyS, (energy(id,e) @ t) kb) 
     = (energy(id,e) @ t) .
eq getSensorKI(id,supplyS, (supply(id,e) @ t) kb) 
     = (supply(id,e) @ t) .
***(
eq getSensorKI(id,treatS, 
              (atloc(id,l) @ t) (treatStage(l,j) @ t0) kb) 
     = (treatStage(l,j) @ t0) .
)
ceq getSensorKI(id,treatS, (atloc(id,l0) @ t) (treatStage(l,j) @ t0) kb) 
     = (treatStage(l,j) @ t0) 
 if ((l == l0) or adjacent(id,(atloc(id,l0) @ t) kb,l))   .

eq getSensorKI(id,obstacleS, (atloc(id,l) @ t) kb) 
     = occupiedNbrs(kb,l) .

eq getSensorKI(id,s:Sensor, kb) = none [owise] .

op getSensorsKI : Id SensorSet KB -> KB .
eq getSensorsKI(id,s:Sensor sset:SensorSet,ekb) =
   (getSensorKI(id,s:Sensor,ekb)  getSensorsKI(id,sset:SensorSet,ekb)) .
eq getSensorsKI(id,(none).SensorSet,ekb) = (none).KB .


ceq readSensor(id,s:Sensor,kb) =
    (if kb1 == none 
    then {kb0,kb} 
    else applySensorF(id,s:Sensor,kb0,kb1,kb) fi)
if kb0 := getSensorKI(id,s:Sensor,kb)
/\ kb1 := getSF(id,s:Sensor,kb)
.

********!!!!!!!!!HERE
****                       sget fault ekb
op applySensorF : Id Sensor KB KB KB -> KBPair .
ceq applySensorF(id,locS,atloc(id,l) @ t0, 
                 (sF(id,locS,simpleFT,sFP(fp0,fp1,ptV(pt0))) @ t1),
                 (rand(id,i,j) @ t4 ) ekb)
    = {atloc(id,l1) @ t3, ekb  (rand(id,i,s s j) @ t)}
  if (fence(id,ll,ur) @ t2) clock(t) randInc(n) ekb0
     := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
  /\ rp1 := (random( (n * (j + 1)) + i) / randMax )
  /\ dl0 := if rp0 < fp0 then pt(0,0) else l fi
  /\ dl1 := if rp1 < fp1 then pt0 else pt(0,0) fi
  /\ l0 := sum(l,dl1)
  /\ l1 := (if (rp0 < fp0) 
            then noLoc 
            else (if inBounds(l0,ll,ur) then l0 else l fi) fi) 
   /\ t3 := 
***    t
       (if (l1 == l) then t0 else t fi)
            .

ceq applySensorF(id,energyS,energy(id,e) @ t0,
          (sF(id,energyS,simpleFT,sFP(fp0,fp1,intV(i0))) @ t1),
          (rand(id,i,j) @ t4 ) ekb)
   = {energy(id,e2) @ t, ekb (rand(id,i,s s j) @ t)}
  if clock(t) randInc(n)  ekb0 := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
  /\ rp1 := (random( (n * (j + 1)) + i) / randMax)
  /\ j0 := if rp0 < fp0 then 0 else 1 fi
  /\ i1 := if rp1 < fp1 then i0 else 0 fi
  /\ i2 := e + i1
  /\ e2 := j0 * (if i2 >= 0 then i2 else 0 fi)
*** /\ t3 := (if (e2 == e) then t0 else t fi)
    .


ceq applySensorF(id,obstacleS,kb0,
                (sF(id,obstacleS,boolFT,bFP(fp0)) @ t1),
                (rand(id,i,j) @ t4 ) ekb) =
        {kb1, (rand(id,i, s j) @ t)  ekb}
  if (fence(id,ll,ur) @ t2) clock(t) randInc(n)  ekb0
     := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
  /\ kb1 := if rp0 < fp0 then none else kb0 fi .
  
eq applySensorF(id,s:Sensor,kb0,kb1,ekb) = {kb0, ekb} [owise] .


ceq applySensorF(id,treatS,treatStage(l,j) @ t0,
          (sF(id,treatS,simpleFT,sFP(fp0,fp1,intV(i0))) @ t1),
          (rand(id,i,j) @ t4 ) ekb)
   = {treatStage(l,j1) @ t, ekb (rand(id,i,s s j) @ t)}
  if clock(t) randInc(n)  ekb0 := ekb
  /\ rp0 := (random( (n * j) + i) / randMax)
  /\ rp1 := (random( (n * (j + 1)) + i) / randMax)
  /\ j0 := if rp0 < fp0 then 0 else 1 fi
  /\ i1 := if rp1 < fp1 then i0 else 0 fi
  /\ i2 := j + i1
  /\ j1 := j0 * (if i2 >= 0 then i2 else 0 fi)
*** /\ t3 := (if (j1 == j) then t0 else t fi)
    .

****TODO supply treatStage faults, 

endfm
